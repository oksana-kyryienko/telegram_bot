const TelegramBot = require("node-telegram-bot-api");
const Vibrant = require("node-vibrant");

const bot = new TelegramBot("5716895097:AAFriyu13C__xRMuLk4dph4S4e-ZMkho_dI", {
  polling: true,
});

const mainMenu = {
  reply_markup: {
    keyboard: [
      ["üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"],
      ["üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è"],
      ["üì∑ –ù–∞—Å—Ç—Ä–æ—ó—Ç–∏ –º–µ–¥—ñ–∞"],
      ["üñºÔ∏è –î–æ–¥–∞—Ç–∏ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫"],
      ["üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ"],
      ["‚è∞ –¢–∞–π–º–µ—Ä –≤–∏–¥–∞–ª–µ–Ω–Ω—è"],
      ["–ë—ñ–ª—å—à–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"],
      ["üî¥ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏"],
      ["–ê–≤—Ç–æ–ø—ñ–¥–ø–∏—Å"]
    ],
    resize_keyboard: true,
  },
};

const instructionsMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è 1", callback_data: "instruction_1" },
        { text: "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è 2", callback_data: "instruction_2" },
      ],
      [{ text: "–ù–∞–∑–∞–¥", callback_data: "back_to_main_menu" }],
    ],
  },
};

const linksMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è 1", url: "http://example.com/link1" },
        { text: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è 2", url: "http://example.com/link2" },
      ],
      [{ text: "–ù–∞–∑–∞–¥", callback_data: "back_to_main_menu" }],
    ],
  },
};

const postEditMenu = {
  reply_markup: {
    inline_keyboard: [
      [{ text: "–ê–≤—Ç–æ–ø—ñ–¥–ø–∏—Å", callback_data: "add_signature" }],
    ],
  },
};

const reactionsMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "‚ù§Ô∏è", callback_data: "reaction_heart" },
        { text: "üòè", callback_data: "reaction_smirk" },
      ],
      [{ text: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data: "apply_reactions" }],
    ],
  },
};

const reactionMapping = {
  reaction_heart: "üëç",
  reaction_smirk: "üëé",
};

const editButtonsMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏", callback_data: "edit_buttons" },
      ],
      [{ text: "–ù–∞–∑–∞–¥", callback_data: "back_to_main_menu" }],
    ],
  },
};


let postReactions = [];

const commentsButton = { text: "üí¨", callback_data: "reaction_comment" };

const commentsMenu = {
  reply_markup: {
    inline_keyboard: [
      [commentsButton],
      [{ text: "üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ", callback_data: "comments" }],
      [{ text: "–ü—Ä–∏–º—ñ–Ω–∏—Ç–∏", callback_data: "apply_comments" }],
    ],
  },
};

let hasComments = false;
let copyChannels = [];

let mediaPosition = "above";

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–í—ñ—Ç–∞—é! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", mainMenu);
});

bot.onText(/üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é:", instructionsMenu);
});

bot.onText(/ –ê–≤—Ç–æ–ø—ñ–¥–ø–∏—Å/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–ê–≤—Ç–æ–ø—ñ–¥–ø–∏—Å:", postEditMenu);
});

bot.onText(/üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è:", linksMenu);
});

bot.onText(/üì∑ –ù–∞—Å—Ç—Ä–æ—ó—Ç–∏ –º–µ–¥—ñ–∞/, (msg) => {
  const chatId = msg.chat.id;
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "–ù–∞–¥ —Ç–µ–∫—Å—Ç–æ–º", callback_data: "position_above" },
          { text: "–ü—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º", callback_data: "position_below" },
        ],
        [{ text: "–†–µ–∞–∫—Ü—ñ—ó", callback_data: "reactions" }],
      ],
    },
  };
  bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞:", options);
});

bot.onText(/üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:", commentsMenu);
});

bot.onText(/‚è∞ –¢–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–Ω—è/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞ (—É –≥–æ–¥–∏–Ω–∞—Ö):");
});

bot.onText(/üñºÔ∏è –î–æ–¥–∞—Ç–∏ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ, –¥–æ —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –≤–æ–¥—è–Ω–∏–π –∑–Ω–∞–∫."
  );
});

bot.onText(/–ë—ñ–ª—å—à–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", {
    reply_markup: {
      keyboard: [
        ["üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"],
      ],
      resize_keyboard: true,
    },
  });
});

bot.onText(/üì§ –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–æ–≤/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª–∏ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:", {
    reply_markup: {
      keyboard: [
        ["üì§ –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏"],
        ["üì• –ó–Ω—è—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤"],
        ["‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
      ],
      resize_keyboard: true,
    },
  });
});

bot.onText(/üì§ –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏/, (msg) => {
  const chatId = msg.chat.id;
  copyChannels = ["channel1", "channel2", "channel3"];
  bot.sendMessage(chatId, "–í—Å—ñ –∫–∞–Ω–∞–ª–∏ –±—É–ª–∏ –≤–∏–±—Ä–∞–Ω—ñ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.");
});

bot.onText(/üì• –ó–Ω—è—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤/, (msg) => {
  const chatId = msg.chat.id;
  copyChannels = [];
  bot.sendMessage(chatId, "–í–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤ –±—É–ª–æ –∑–Ω—è—Ç–æ.");
});

bot.onText(/‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è/, (msg) => {
  const chatId = msg.chat.id;
  if (copyChannels.length > 0) {
    bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª–∏ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –±—É–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ: ${copyChannels.join(", ")}.`);
    copyPostToChannels(copyChannels);
  } else {
    bot.sendMessage(chatId, "–í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.");
  }
});

bot.onText(/üî¥ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", editButtonsMenu);
});

function handleMediaPosition(chatId, messageId) {
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "–ù–∞–¥ —Ç–µ–∫—Å—Ç–æ–º", callback_data: "position_above" },
          { text: "–ü—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º", callback_data: "position_below" },
        ],
      ],
    },
  };
  bot.editMessageText("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞:", {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: options.reply_markup,
  });
}

function addWatermark(imagePath, watermarkText, callback) {
  Vibrant.from(imagePath)
    .getPalette()
    .then((palette) => {
      const dominantColor = palette.Vibrant.hex;
      const watermarkedImagePath = "path/to/watermarked/image.jpg";
      callback(watermarkedImagePath);
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
      callback(null);
    });
}

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;

  if (data === "add_signature") {
    bot.answerCallbackQuery(query.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –¥–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ–ø—ñ–¥–ø–∏—Å");
    bot.sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–ø—ñ–¥–ø–∏—Å—É:");
  }

  if (data.startsWith("select_signature_")) {
    const selectedIndex = parseInt(data.slice(17)); 
    const selectedSignature = getSignatureByIndex(chatId, selectedIndex);

    bot.answerCallbackQuery(query.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –∞–≤—Ç–æ–ø—ñ–¥–ø–∏—Å—É");
  }

  if (data === "edit_buttons") {
    bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", editButtonsMenu);
  }

  if (data.startsWith("edit_button_text_")) {
    const buttonText = data.replace("edit_button_text_", "");
    bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "${buttonText}":`);
  }

  if (data === "reactions") {
    bot.editMessageText("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∞–∫—Ü—ñ—ó:", {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: reactionsMenu.reply_markup,
    });
  } else if (data.startsWith("reaction_")) {
    const reaction = data.replace("reaction_", "");
    const index = postReactions.indexOf(reaction);

    if (index === -1) {
      postReactions.push(reaction);
    } else {
      postReactions.splice(index, 1);
    }

    const updatedReactionsMenu = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚ù§Ô∏è", callback_data: "reaction_heart" },
            { text: "üòè", callback_data: "reaction_smirk" },
          ],
          [{ text: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data: "apply_reactions" }],
        ],
      },
    };

    if (postReactions.length > 0) {
      updatedReactionsMenu.reply_markup.inline_keyboard.unshift(
        postReactions.map((reaction) => ({
          text: reactionMapping[reaction],
          callback_data: `reaction_${reaction}`,
        }))
      );
    }

    bot.editMessageReplyMarkup(
      {
        inline_keyboard: updatedReactionsMenu.reply_markup.inline_keyboard,
      },
      {
        chat_id: chatId,
        message_id: messageId,
      }
    );
  } else if (data === "apply_reactions") {
    bot.answerCallbackQuery(query.id, "–†–µ–∞–∫—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ");
  }

  if (data === "back_to_main_menu") {
    bot.editMessageText("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: mainMenu.reply_markup,
    });
  } else if (data === "instruction_1") {
    // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–µ—Ä—à–æ—ó —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
    bot.answerCallbackQuery(query.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é 1");
    handleMediaPosition(chatId, messageId);
  } else if (data === "instruction_2") {
    // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥—Ä—É–≥–æ—ó —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
    bot.answerCallbackQuery(query.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é 2");
    handleMediaPosition(chatId, messageId);
  } else if (data === "position_above") {
    mediaPosition = "above";
    bot.answerCallbackQuery(query.id, "–ú–µ–¥—ñ–∞ –±—É–¥–µ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º");
  } else if (data === "position_below") {
    mediaPosition = "below";
    bot.answerCallbackQuery(query.id, "–ú–µ–¥—ñ–∞ –±—É–¥–µ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –ø—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º");
  } else if (data === "comments") {
    bot.editMessageText("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:", {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: commentsMenu.reply_markup,
    });
  } else if (data === "reaction_comment") {
    hasComments = !hasComments;

    const updatedCommentsMenu = {
      reply_markup: {
        inline_keyboard: [
          [commentsButton],
          [{ text: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data: "apply_comments" }],
        ],
      },
    };

    if (hasComments) {
      updatedCommentsMenu.reply_markup.inline_keyboard.unshift([
        { text: "‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ", callback_data: "comments" },
      ]);
    }

    bot.editMessageReplyMarkup(
      {
        inline_keyboard: updatedCommentsMenu.reply_markup.inline_keyboard,
      },
      {
        chat_id: chatId,
        message_id: messageId,
      }
    );
  } else if (data === "apply_comments") {
    bot.answerCallbackQuery(query.id, "–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ");
  }

  if (data === "copy_post") {
    bot.answerCallbackQuery(query.id, "–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");
    // –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó, –¥–µ –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    const copyPostMenu = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üì§ –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏", callback_data: "select_all_channels" },
          ],
          // –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –ø—É–Ω–∫—Ç–∏ –º–µ–Ω—é –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
        ],
      },
    };

    bot.editMessageText("–ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:", {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: copyPostMenu.reply_markup,
    });
  }

  if (data === "select_all_channels") {
    // –î–æ–¥–∞–π—Ç–µ –∫–æ–¥ –¥–ª—è –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    copyChannels = ["channel1", "channel2", "channel3"]; // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–ª–∞—Å–Ω—É –ª–æ–≥—ñ–∫—É –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤
    bot.answerCallbackQuery(query.id, "–í—Å—ñ –∫–∞–Ω–∞–ª–∏ –±—É–ª–∏ –≤–∏–±—Ä–∞–Ω—ñ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è");
  }

});

bot.on("photo", (msg) => {
  const photo = msg.photo[0];
  const fileId = photo.file_id;
  const filePath = bot.getFileLink(fileId);

  addWatermark(filePath, "–í–∞—à –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫", (watermarkedImagePath) => {
    if (watermarkedImagePath) {
      bot.sendPhoto(msg.chat.id, watermarkedImagePath);
    } else {
      bot.sendMessage(
        msg.chat.id,
        "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞"
      );
    }
  });
});

bot.onText(/(\d+)/, (msg, match) => {
  if (timerDuration === null) {
    timerDuration = parseInt(match[0]);

    if (timerDuration > 0) {
      setTimeout(() => {
        bot.sendMessage(msg.chat.id, "Deleting the post...");
        timerDuration = null;
      }, timerDuration * 3600000);
      bot.sendMessage(msg.chat.id, `–¢–∞–π–º–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${timerDuration} –≥–æ–¥–∏–Ω(–∏).`);
    } else {
      bot.sendMessage(msg.chat.id, "–ù–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ.");
      timerDuration = null;
    }
  }
});

bot.onText(/(.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const messageText = match[0];

  if (messageText.startsWith("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏")) {
    const buttonText = messageText.replace("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ ", "");
    bot.answerCallbackQuery(query.id, `–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "${buttonText}" –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ`);
  }

});

bot.onText(/\/signature (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const signature = match[1];

  saveSignature(chatId, signature);
  bot.sendMessage(chatId, "–ê–≤—Ç–æ–ø—ñ–¥–ø–∏—Å –¥–æ–¥–∞–Ω–æ!");
});

function saveSignature(chatId, signature) {
  //–∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–ø—ñ–¥–ø–∏—Å—É –∑–∞ chatId
  //–±–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–ø—ñ–¥–ø–∏—Å—ñ–≤
}

