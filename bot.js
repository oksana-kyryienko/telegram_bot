const Jimp = require("jimp");
const TelegramBot = require("node-telegram-bot-api");

const bot = new TelegramBot("5716895097:AAFriyu13C__xRMuLk4dph4S4e-ZMkho_dI", {
  polling: true,
});

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
function createMenuKeyboard() {
  return {
    keyboard: [
      ["/start", "/reactions"],
      ["/addbuttons", "/movebuttons"],
      ["/disablebuttons"],
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  };
}

function sendMenuMessage(chatId) {
  bot.sendMessage(chatId, "–ú–µ–Ω—é:", {
    reply_markup: JSON.stringify(createMenuKeyboard()),
  });
}

bot.onText(/\/menu/, (msg) => {
  console.log("Received /menu command");
  const chatId = msg.chat.id;
  sendMenuMessage(chatId);
});

let buttons = [["–ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ 1", "–ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ 2"], ["–ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ 3"]];

// –¢–∞–±–ª–∏—Ü—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–∞–∫—Ü—ñ–π —É —Ç–µ–ª–µ–≥—Ä–∞–º
const reactionTable = [
  ["üëç", "üëé"],
  ["üòÑ", "üò¢"],
  ["üòÇ", "üò°"],
];

bot.onText(/\/start/, (msg) => {
  console.log("Received /start command");
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ—Å–ø–æ–≤—ñ—â–µ–Ω—å.");

  const options = {
    parse_mode: "HTML",
  };

  // –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º
  bot.sendMessage(chatId, "–¢—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º", options);

  // –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º
  bot.sendMessage(chatId, "–¢—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º", options);

  // –î–æ–¥–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
  const replyMarkup = {
    keyboard: buttons,
    resize_keyboard: true,
    one_time_keyboard: true,
  };

  bot.sendMessage(chatId, "–û—Å—å –¥–µ—è–∫—ñ –∫–Ω–æ–ø–∫–∏:", {
    reply_markup: JSON.stringify(replyMarkup),
  });

  // –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /reactions
  const reactionButton = {
    text: "–í–∏–±—Ä–∞—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—é",
    callback_data: "/reactions",
  };

  const inlineKeyboard = {
    inline_keyboard: [[reactionButton]],
  };

  // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /reactions
  bot.sendMessage(chatId, "–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:", { reply_markup: inlineKeyboard });

  // –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É /menu
  const menuButton = {
    text: "–ú–µ–Ω—é",
    callback_data: "/menu",
  };

  const inlineMenuButton = {
    inline_keyboard: [[menuButton]],
  };

  bot.sendMessage(chatId, "–û—Å—å –∫–Ω–æ–ø–∫–∞ /menu:", {
    reply_markup: inlineMenuButton,
  });

  bot.sendMessage(
    chatId,
    "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É, —ñ –º–∏ —ó—ó –æ–ø—Ä–∞—Ü—é—î–º–æ."
  );

  bot.sendMessage(
    chatId,
    '–û—Ç—Ä–∏–º—É–π—Ç–µ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —É –Ω–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–∫–∞—Ö. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" –Ω–∏–∂—á–µ.',
    {
      reply_markup: {
        keyboard: [["–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
});

bot.onText(/–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è/, (msg) => {
  console.log("Received subscription request");
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É! –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à–∞–π—Ç–µ—Å—è –Ω–∞ –∑–≤'—è–∑–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ–≤–∏–Ω —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π."
  );
});

bot.onText(/\/advertise/, (msg) => {
  console.log("Received /advertise command");
  const chatId = msg.chat.id;

  // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É

  if (advertise) {
    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Ä–µ–∫–ª–∞–º–∏
    bot.sendMessage(chatId, "–û—Å—å –Ω–∞—à–∞ –æ—Å—Ç–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è:");
    bot.sendMessage(
      chatId,
      "–¢—É—Ç –º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –π–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç."
    );

    //–¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó

    // const keyboard = {
    //   inline_keyboard: [
    //     [
    //       { text: '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ', url: 'http://example.com' }
    //     ]
    //   ]
    // };
    // bot.sendMessage(chatId, '–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é:', { reply_markup: keyboard });
  } else {
    bot.sendMessage(
      chatId,
      '–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É. –©–æ–± –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è".'
    );
  }
});

bot.onText(/\/disablebuttons/, (msg) => {
  console.log("Received /disablebuttons command");
  const chatId = msg.chat.id;

  const replyMarkup = {
    remove_keyboard: true,
  };

  bot.sendMessage(chatId, "–ö–Ω–æ–ø–∫–∏ –≤–∏–º–∫–Ω–µ–Ω–æ.", {
    reply_markup: JSON.stringify(replyMarkup),
  });
});

bot.onText(/\/addbuttons/, (msg) => {
  console.log("Received /addbuttons command");
  const chatId = msg.chat.id;

  const replyMarkup = {
    keyboard: buttons,
    resize_keyboard: true,
    one_time_keyboard: true,
  };

  bot.sendMessage(chatId, "–î–æ–¥–∞–Ω–æ –Ω–æ–≤—ñ –∫–Ω–æ–ø–∫–∏.", {
    reply_markup: JSON.stringify(replyMarkup),
  });
});

bot.onText(/\/movebuttons/, (msg) => {
  console.log("Received /movebuttons command");
  const chatId = msg.chat.id;

  // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º
  buttons = shuffleButtons(buttons);

  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–µ—Ä–µ–º—ñ—à–∞–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
  const replyMarkup = {
    keyboard: buttons,
    resize_keyboard: true,
    one_time_keyboard: true,
  };

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–º—ñ—à–∞–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
  bot.sendMessage(chatId, "–ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ –∫–Ω–æ–ø–∫–∏.", {
    reply_markup: JSON.stringify(replyMarkup),
  });
});

function shuffleButtons(buttons) {
  const shuffledButtons = [...buttons];

  for (let i = shuffledButtons.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffledButtons[i], shuffledButtons[j]] = [
      shuffledButtons[j],
      shuffledButtons[i],
    ];
  }

  return shuffledButtons;
}

bot.onText(/\/reactions/, (msg) => {
  console.log("Received /reactions command");
  const chatId = msg.chat.id;

  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ä–µ–∞–∫—Ü—ñ—è–º–∏
  const replyMarkup = {
    keyboard: reactionTable,
    resize_keyboard: true,
    one_time_keyboard: true,
  };

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü–µ—é —Ä–µ–∞–∫—Ü—ñ–π
  bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∞–∫—Ü—ñ—é:", {
    reply_markup: JSON.stringify(replyMarkup),
  });
});

bot.onText(/\/disablereaction (.+)/, (msg, match) => {
  console.log("Received /disablereaction command");
  const chatId = msg.chat.id;
  const reaction = match[1];

  for (let i = 0; i < reactionTable.length; i++) {
    const row = reactionTable[i];
    const index = row.indexOf(reaction);
    if (index !== -1) {
      row.splice(index, 1);
      break;
    }
  }

  const replyMarkup = {
    keyboard: reactionTable,
    resize_keyboard: true,
    one_time_keyboard: true,
  };

  bot.sendMessage(chatId, `–†–µ–∞–∫—Ü—ñ—é ${reaction} –≤–∏–º–∫–Ω–µ–Ω–æ.`, {
    reply_markup: JSON.stringify(replyMarkup),
  });
});

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;

  if (data === "/reactions") {
    console.log("Received /reactions inline button");
    const replyMarkup = {
      keyboard: reactionTable,
      resize_keyboard: true,
      one_time_keyboard: true,
    };
    bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∞–∫—Ü—ñ—é:", {
      reply_markup: JSON.stringify(replyMarkup),
    });
  } else {
    console.log("Received reaction:", data);
    bot.deleteMessage(chatId, messageId);
    const replyMarkup = {
      keyboard: buttons,
    };
    bot.sendMessage(chatId, "–û—Å—å –¥–µ—è–∫—ñ –∫–Ω–æ–ø–∫–∏:", {
      reply_markup: JSON.stringify(replyMarkup),
    });
  }
});

// –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
const stopWords = ["—Å–ø–∞–º", "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", "–Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–æ"];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–ª—ñ–≤
function checkComment(text) {
  for (let i = 0; i < stopWords.length; i++) {
    if (text.toLowerCase().includes(stopWords[i])) {
      return true;
    }
  }
  return false;
}

bot.on("message", (msg) => {
  console.log("Received comment:", msg.text);
  const chatId = msg.chat.id;

  if (checkComment(msg.text)) {
    bot.sendMessage(chatId, "–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π —ñ –±—É–¥–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.");
    bot.deleteMessage(chatId, msg.message_id);
    return;
  }

  // –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–Ω–∞—á–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä
  if (msg.text.length > 20) {
    bot.sendMessage(chatId, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä!");
    return;
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /disablereaction
bot.onText(/\/disablereaction (.+)/, (msg, match) => {
  console.log("Received /disablereaction command");
  const chatId = msg.chat.id;
  const reaction = match[1];

  for (let i = 0; i < reactionTable.length; i++) {
    const row = reactionTable[i];
    const index = row.indexOf(reaction);
    if (index !== -1) {
      row.splice(index, 1);
      break;
    }
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ä–µ–∞–∫—Ü—ñ—è–º–∏
  const replyMarkup = {
    keyboard: reactionTable,
    resize_keyboard: true,
    one_time_keyboard: true,
  };

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–Ω–æ–≤–ª–µ–Ω–æ—é —Ç–∞–±–ª–∏—Ü–µ—é —Ä–µ–∞–∫—Ü—ñ–π
  bot.sendMessage(chatId, `–†–µ–∞–∫—Ü—ñ—é ${reaction} –≤–∏–º–∫–Ω–µ–Ω–æ.`, {
    reply_markup: JSON.stringify(replyMarkup),
  });
});

const channelId = 1;
// –¢–∞–π–º–µ—Ä –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
function scheduleMessageDeletion(chatId, messageId, delay) {
  setTimeout(() => {
    bot.deleteMessage(chatId, messageId);
  }, delay);
}
bot.sendMessage(channelId, "–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è").then((sentMessage) => {
  const messageId = sentMessage.message_id;
  const delay = 60 * 60 * 1000; // 1 –≥–æ–¥–∏–Ω–∞

  scheduleMessageDeletion(channelId, messageId, delay);
});

function deleteNewsAndCompetitions(channelId, messages) {
  const delay = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏

  messages.forEach((message) => {
    scheduleMessageDeletion(channelId, message.message_id, delay);
  });
}
const newsAndCompetitions = [
  { message_id: 1, text: "–ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" },
  { message_id: 2, text: "–î—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" },
];

deleteNewsAndCompetitions(channelId, newsAndCompetitions);

//–ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ —É –∫—ñ–ª—å–∫–∞ –∫–∞–Ω–∞–ª—ñ–≤ —ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –ø–æ—Å—Ç—ñ–≤ —É –¥–µ–Ω—å
const targetChannels = ["channel1", "channel2", "channel3"];
function sendPostToChannels(post) {
  targetChannels.forEach((channel) => {
    bot.sendMessage(channel, post);
  });
}
// –ü—Ä–∏–∫–ª–∞–¥ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å—Ç—É
const post = "–¶–µ –Ω–æ–≤–∏–π –ø–æ—Å—Ç!";
const maxPostsPerDay = 10;

sendPostToChannels(post);
let postsPublishedToday = 0;
if (postsPublishedToday < maxPostsPerDay) {
  sendPostToChannels(post);
  postsPublishedToday++;
} else {
  console.log("–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π —É –¥–µ–Ω—å.");
}
function resetPostsCounter() {
  const now = new Date();
  const nextDay = new Date(
    now.getFullYear(),
    now.getMonth(),
    now.getDate() + 1
  );
  const timeUntilNextDay = nextDay.getTime() - now.getTime();

  setTimeout(() => {
    postsPublishedToday = 0;
    resetPostsCounter();
  }, timeUntilNextDay);
}

resetPostsCounter();

//–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞

async function resizeImage(imagePath, width, height) {
  const image = await Jimp.read(imagePath);
  await image.resize(width, height).writeAsync(imagePath);
}

//–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
function editText(text) {
  return text.toUpperCase();
}

//–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–æ–¥—è–Ω–∏—Ö –∑–Ω–∞–∫—ñ–≤
Jimp.read("—à–ª—è—Ö_–¥–æ_–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
  .then((image) => {
    return Jimp.read("—à–ª—è—Ö_–¥–æ_–≤–æ–¥—è–Ω–æ–≥–æ_–∑–Ω–∞–∫—É").then((watermark) => {
      image.composite(watermark, x, y, options);
      return image.write("—à–ª—è—Ö_–¥–æ_–Ω–æ–≤–æ–≥–æ_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
    });
  })
  .catch((err) => {
    console.error(err);
  });

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ —É –∫–∞–Ω–∞–ª
function sendReportToChannel(channelId, report) {
  bot.sendMessage(channelId, report);
}


bot.startPolling();
